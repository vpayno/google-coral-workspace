#!/bin/bash
#
# .github/citools/coral/coral-setup-install
#

# shellcheck disable=SC1091
source ../../.github/citools/includes/wrapper-library || exit

declare -i retval=0

main() {
	printf "Google Coral Installation\n\n"

	print_ruler

	local -a coral_pkgs
	local coral_pkg

	# can't figure out how to pass "yes\n" to apt when installing libedgetpu1-max
	coral_pkgs=(
		python3-pycoral
		python3-tflite-runtime
		python3-edgetpu
		pycoral-examples
		libedgetpu1-std
		gasket-dkms
		edgetpu-examples
		edgetpu-compiler
	)

	echo Creating /etc/apt/sources.list.d/google-cloud.list
	tee -a /etc/apt/sources.list.d/google-cloud.list <<-EOF
		deb [signed-by=/usr/share/keyrings/google.cloud.keyring.gpg] https://packages.cloud.google.com/apt coral-edgetpu-stable main
		deb [signed-by=/usr/share/keyrings/google.cloud.keyring.gpg] https://packages.cloud.google.com/apt cloud-sdk main
	EOF

	print_ruler

	# echo Running: curl -sS https://packages.cloud.google.com/apt/doc/apt-key.gpg \| tee /usr/share/keyrings/google.cloud.keyring.gpg
	# time curl -sS https://packages.cloud.google.com/apt/doc/apt-key.gpg | tee /usr/share/keyrings/google.cloud.keyring.gpg || track_errors

	# print_ruler

	echo Running: curl https://packages.cloud.google.com/apt/doc/apt-key.gpg \| sudo gpg --dearmor --yes -o /usr/share/keyrings/google.cloud.keyring.gpg
	time curl -sS https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor --yes -o /usr/share/keyrings/google.cloud.keyring.gpg || track_errors

	print_ruler

	# echo Running: curl -sS https://packages.cloud.google.com/apt/doc/apt-key.gpg \| apt-key add -
	# time curl -sS https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - || track_errors

	# print_ruler

	echo Running: sudo apt update
	time sudo apt update || track_errors

	print_ruler

	for coral_pkg in "${coral_pkgs[@]}"; do
		echo Running: sudo apt install -y "${coral_pkg}"
		time sudo apt install -y "${coral_pkg}" # || track_errors
		printf "\n"

		echo Running: sudo apt-mark manual "${coral_pkg}"
		time sudo apt-mark manual "${coral_pkg}" # || track_errors
		printf "\n"
	done

	print_ruler

	printf "Configuring Shell: "
	tee /etc/profile.d/coral.sh <<-EOF
		#
		# /etc/profile.d/coral.sh
		#

	EOF
	printf "done\n"

	# shellcheck disable=SC1090
	echo Running: source /etc/profile.d/python.sh
	source /etc/profile.d/python.sh || track_errors
	printf "done\n"

	# shellcheck disable=SC1090
	echo Running: source /etc/profile.d/coral.sh
	source /etc/profile.d/coral.sh || track_errors
	printf "done\n"

	print_ruler

	echo Running: python3.9 --version
	time python3.9 --version || track_errors

	print_ruler

	declare -a cargo_pkgs=(
	)
	declare cargo_pkg

	declare -a go_pkgs=(
		github.com/charmbracelet/glow@latest
		github.com/charmbracelet/gum@latest
		github.com/mikefarah/yq/v4@latest
		github.com/stateful/runme/v3@v3
	)
	declare go_pkg

	declare -a pip_pkgs=(
		mendel-development-tool
		yamllint
		yamlfix
	)
	declare pip_pkg

	declare -a npm_pkgs=(
	)
	declare npm_pkg

	declare -a apt_pkgs=(
	)

	print_ruler

	echo Running: apt update
	time apt update

	print_ruler

	if [[ ${#apt_pkgs[@]} -gt 0 ]]; then
		echo Running: apt install -y "${apt_pkgs[@]}"
		# libedgetpu1-max has a yes/no prompt
		time apt install -y "${apt_pkgs[@]}"
	fi

	print_ruler

	time for cargo_pkg in "${cargo_pkgs[@]}"; do
		time cargo install --locked "${cargo_pkg}"
		printf "\n"
	done

	print_ruler

	time for go_pkg in "${go_pkgs[@]}"; do
		time go install "${go_pkg}"
		printf "\n"
	done

	print_ruler

	time for pip_pkg in "${pip_pkgs[@]}"; do
		time pip install "${pip_pkg}"
		printf "\n"
	done

	print_ruler

	time for npm_pkg in "${npm_pkgs[@]}"; do
		npm install -g "${npm_pkg}"
	done

	print_ruler

	echo Exit code: "${retval}"
	return "${retval}"
}

time main "${@}"
